#/usr/bin/python
# Author: Derek Guan
# Purpose: remark classification results generated by kraken or gsw

import sys, imp
import numpy as np    
import matplotlib.mlab as mlab    
import matplotlib.pyplot as plt    
  



def taxonomyTree(tidTreePath, tidTree, level):
	# z = {'no rank': 2, 'species':2, 'subspecies':2, 'varietas':2, 'subgenus':2, 'forma':2, 'species subgroup':2, 'species group':2, 'genus':1}	
	z = {'no rank':2 }
	l= ["superkingdom","kingdom","subkingdom","superphylum","phylum","subphylum","superclass","class","subclass","infraclass","superorder","order","parvorder","suborder","infraorder","superfamily","family","subfamily","tribe","subtribe","genus","subgenus","species group","species subgroup","species","subspecies","forma","varietas"]
	
	llength = len(l) 
	level_index = l.index(level)
	
	z[l[level_index]] = 1
	# print z

	i = level_index + 1 
	while i < llength:
		z[l[i]] = 2 
		i = i + 1
	# print z
	fp = open(tidTreePath)
	for ln in fp:
		lnlist = ln.strip().split('\t|\t')
		
		if lnlist[2] in z:
			tidTree[lnlist[0]] = [lnlist[1], z[lnlist[2]]]
		else:
			tidTree[lnlist[0]] = [lnlist[1], 0];
	# print tidTree	
	#don't forget comment 1
	tidTree['1'] = ['1', 0]
	# print tidTree['1380744']
	fp.close()

def stat(tidTree, clyPath, stat_dict):

	classified = 0 

	correctClassified = 0

	totalSequences = 0
	
	# gidfp = open(gidsPath)

	ind = 0
	# print tidTree['1380744']
	fp = open(clyPath)
	
	for ln in fp:
		
		lnlist = ln.strip().split('\t')
		
		# print lnlist
		# stid = rtid
		# print stid
		# gidln = gidfp.readline().strip()
		# if  gidln != "UNKNOWN":
		# stid = gidln	
		# if stid == '1380744':
			# print tidTree[stid]
		# while tidTree[stid][1] > 1:
			# stid = tidTree[stid][0]
		
		# zk = tidTree[stid][0]
		# uplist = []
		# while tidTree[zk][0] != "1":
			# uplist.append(zk)
			# zk = tidTree[zk][0]
		# uplist.append("1")
		# print uplist	
		if lnlist[0] == 'C':
			tid = lnlist[2]
			
			while tidTree[tid][1] > 1:
				tid = tidTree[tid][0]
			
			#classification result is below or equal the taxonomy level
			if tidTree[tid][1]:
				if tid in stat_dict:
					stat_dict[tid] = stat_dict[tid] + 1
				else:
					stat_dict[tid] = 0


	fp.close()

def draw_bar(labels,quants, nElement, level):  
        width = 0.4  
        ind = np.linspace(0.5,9.5, nElement)  
        # make a square figure  
        # fig = plt.figure(1)  
        # ax  = fig.add_subplot(111)  
        fig, ax  = plt.subplots()  
        # Bar Plot 
             
        ax.bar(ind-width/2,quants,width,color='green')  
        # Set the ticks on x-axis  
        ax.set_xticks(ind)  
        ax.set_xticklabels(labels)  
        # labels  
        ax.set_xlabel('Taxonomy ID')  
        ax.set_ylabel('Read Number')  
        # title  
        ax.set_title('Top '+str(nElement) + level, bbox={'facecolor':'0.8', 'pad':5})  
        # plt.grid(True)  
        plt.show()  
        plt.savefig("barAnalysis.jpg")  
        plt.close()  



def drawAnalysis(stat_type, labels, values, level):
	if stat_type == "pie":
	        fig = plt.figure()  
		plt.pie(values, labels=labels,autopct='%1.2f%%') 	
		plt.xlabel("X-axis")  
		plt.ylabel("Y-axis")  
		plt.title(level+" distr")  
		
		plt.show()    
		plt.savefig("pieAnalysis.jpg") 
                plt.close()
	else:
		draw_bar(labels,values, len(labels), level)  



def help():
	print "deSPI-analysis <stat_type> <tree_path> <label_path> <num_taxon> <taxon_level>"
	print ""
	print "Argument:"
	print "         stat_type       define style of analysis result. bar or pie"
	print "         tree_path       path of phylogenetic tree"
	print "         label_path      path of classification result"
	print "         num_taxon       display top N numbers of taxonomy"
	print "         taxon_level     mapping taxonomy ID of reads to which level (genus)"



if __name__ == "__main__":
	
	count_args = len(sys.argv)

	if count_args < 5:
		help()
		sys.exit(1)
	
	
	
	statType = sys.argv[1]
	tidTreePath = sys.argv[2]

	clyPath = sys.argv[3]
	nElement = int(sys.argv[4])
	if count_args < 6:
		level = "genus"
	else:	
		level = sys.argv[5] 
	
	# tid = sys.argv[3]
	# tidsPath =sys.argv[4]

	tidTree = {}
	taxonomyTree(tidTreePath, tidTree, level)

	# print tidTree
	# tids = []
	# obtainTids(tidsPath, tids)
	stat_dict = {}
	stat(tidTree, clyPath, stat_dict)

        topNlabels = sorted(stat_dict, key= stat_dict.get, reverse=True)[:nElement]
	topNvalues = [stat_dict[x] for x in topNlabels]

	drawAnalysis(statType, topNlabels, topNvalues, level)
